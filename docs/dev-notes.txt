This file contains assorted notes written during project development


--------------------------------------------------------------------------------------
link: https://github.com/eliben/llvm-clang-samples/blob/master/src_clang/tooling_sample.cpp

this links to a sample code from 2018. Of particular interest is the use of the Rewriter class and its InsertText function
this code includes (among several others) "clang/Rewrite/Core/Rewriter.h"

--------------------------------------------------------------------------------------
link: https://github.com/llvm/llvm-project/tree/main/clang/lib/Tooling/Transformer
this is where clang transformer lives in the llvm github

--------------------------------------------------------------------------------------
Building tools with LibTooling.LibASTMatchers
---------------------------------------------
link: https://intel.github.io/llvm-docs/clang/LibASTMatchersTutorial.html

look at this

--------------------------------------------------------------------------------------
ASTMatcher
----------
link: https://clang.llvm.org/docs/LibASTMatchersReference.html

"
Node matchers are at the core of matcher expressions - they specify the type of node that is expected. 
Every match expression starts with a node matcher, which can then be further refined with a narrowing or 
traversal matcher. All traversal matchers take node matchers as their arguments.
"
start with a node matcher, then qualify with traversal and narrowing matchers

--------------------------------------------------------------------------------------
Clang Setup
-----------
link: https://clang.llvm.org/get_started.html


--------------------------------------------------------------------------------------
Clang Transformer tutorial
--------------------------

link: https://intel.github.io/llvm-docs/clang/ClangTransformerTutorial.html

"
Clang Transformer is for developers who want to write clang-tidy checks or write tools to modify a large number of C++ files
"
^ so look at clang-tidy (well maybe)

--------------------------------------------------------------------------------------
Clang Docs index
----------------

link: https://intel.github.io/llvm-docs/clang/index.html#using-clang-as-a-library

https://intel.github.io/llvm-docs/clang/LibTooling.html:
when writing a tool, the tool is executed by something like: 
```
int result = Tool.run(newFrontendActionFactory<clang::SyntaxOnlyAction>().get());
```
The above executes a FrontendAction of type SyntaxOnlyAction. You define your own FrontendAction objects 
by extending FrontendAction or classes that themselves extend FrontendAction

https://clang.llvm.org/docs/RAVFrontendAction.html:
how to build FrontendActions

left off in https://intel.github.io/llvm-docs/clang/RAVFrontendAction.html

--------------------------------------------------------------------------------------
link: https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html

gcc reference; looking at -fpic, fuse-ld, etc
these were irrelevant to the linker errors. see

--------------------------------------------------------------------------------------
link: https://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html
under -fpic/fPIC: pic = position independent code
under -fpie/fPIE: pie = position independent executable
but this wasn't the cause of the linker errors; see `my notes` section

--------------------------------------------------------------------------------------
link: https://stackoverflow.com/questions/59888374/using-clang-as-a-library-in-c-project
this discussed a setup similar to what I was trying to do with the RAVFrontendAction
sample code

--------------------------------------------------------------------------------------
my notes:
---------
include path is "$(path to llvm-project)/clang/include/"

run a command like this to dump a clang AST representation of a source file
clang -Xclang -ast-dump -fsyntax-only -I./include src/print_hello.c

https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html

Linker error: "/usr/bin/ld: warning: creating DT_TEXTREL in a PIE"
so it looks like I don't want llvm built with PIE?

scratch that: just realized above is a warning. The real problems are that the included files can't find their implementations

the linker errors resulted from missing -lclang flags in the is 
To solve this, try looking at the functions/source files referenced in the errors and trying to infer what library that function is defined in
note that llvm-config is a tool that automatically generates the required llvm library -l is
but there does not appear to be an equivalent for clang